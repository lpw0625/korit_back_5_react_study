// 함수를 쓰는 이유랑 동일하다. 간결, 중복제거 기능의 집합, 재사용, 호출하는 식으로 쓰겠다. 
// 함수는 입력과 출력 (매개 변수, 리턴)을 알아야 한다.
// 기능들을 하나씩 묶어서 쓸수 있게끔 라이브러리로 만드는것 >> 모듈화
// 응집도. 응집도 높여라 라는 의미는 관련이 있는 기능들끼리 하나의 함수로 묶어두라라는 의미.
// 즉, 이 함수의 정의를 정하는것. 
// 결합도=의존성 >> 내가 생성이 되어야만 똑같이 생성이 되는 의미.
// 응집성: 관련있는 것들만 넣는것.
// 응집성은 높고 결합도는 낮아야만 객체 지향이 가능하다.
// 컴포넌트는 대문자로 시작해야 활성이 가능하다. 이것은 약속이다.
// 컴포넌트는 무조건 jsx를 리턴한다.
// 비구조 할당으로 쓸때 장점은 추가로 변수를 넣을때 자동으로 추가가 된다.

function ComponentStudy({a,b}) {
    // 상태관리useState
    // 마운트관리 useEffect => useMemo, useCallBack

    return <div>{a} /// {b} </div> // 리턴은 무조건 html 태그를 리턴한다
                                                // 태그로 되어 있기에 Props로 넘어가준다. 

}

export default ComponentStudy;

// 디폴트는 이름이 변경 가능하다 .
